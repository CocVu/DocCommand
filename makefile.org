* Macro
** Format
   $@: $^
   $@: %.c $(DEPS)

   %.o: %.c $(DEPS)
   $(CC) -c -o $@ $< $(CFLAGS)

* Flags
  FLAGS = -ggdb -Wall

  | Wall | warning all              |
  | -I.  | all .h in current folder |

  -I dir, --include-dir=dir
  Specifies a directory dir to search for included makefiles

** gcc: -c
   create object file
   Compile or assemble the source files, but do not link.
   The linking stage simply is not done.  The ultimate output
   is in the form of an object file for each source file.

** gcc vs g++
   gcc will compile: *.c/*.cpp files as C and C++ respectively.
   g++ will compile: *.c/*.cpp files but they will all be treated as C++ files.
   Also if you use g++ to link the object files it automatically links in the std C++ libraries (gcc does not do this).
   gcc compiling C files has fewer predefined macros.
   gcc compiling *.cpp and g++ compiling *.c/*.cpp files has a few extra macros

* example
  CC=g++
  CFLAGS=-I.
  SQL=-l sqlite3
  DEPS=header.h
  OBJ=main.o  convert.o login.o select.o teacher.o student.o admin.o update.o init.o

  %.o: %.cpp $(DEPS)
  $(CC) -c -o $@ $< $(CFLAGS)

  main: $(OBJ)
  $(CC) -o $@ $^ $(SQL)
  all: main
  ./main

  .PHONY: clean
  clean:
  @rm -f $(PROGRAMS) *.o core
